<?php
require_once dirname(__FILE__) . "/dbutils/ShusterDb.php";
require_once dirname(__FILE__) . "/dbutils/RecordsetIterator.php";
require_once dirname(__FILE__) . "/interfaces/PancakeTF_DBAccessI.class.php";

class PancakeTF_ShusterDB implements PancakeTF_DBAccessI{
	private static $db = null;
	public function __construct(lib_dbutils_ShusterDb $db = null){
		if (false === is_null($db)) self::$db = $db;
		if (false === is_null(self::$db)) return self::$db;
		throw new LogicException("no DB is set");
	}

	/**
	 * performs a query to the database and returns the result as an array or rows (represented as arrays)
	 * 	@param string $sql    an sql query before sanitazation (question marks instead of paramater values)
	 * 	@param array  $params an array of paramaters to pass to the query
	 * @access public
	 * @return array
	 */
	public function queryArray($sql, $params = array()){
		$sql = $this->generateSQL($sql,$params);
		self::$db->select($sql);
		$arr = array();
		while ($row= self::$db->getRow()) $arr[]=$row;
		return $arr;
	}
	
	/**
	 * performs a query to the database and returns the result`s 1st row as an array
	 * 	@param string $sql    an sql query before sanitazation (question marks instead of paramater values)
	 * 	@param array  $params an array of paramaters to pass to the query
	 * @access public
	 * @return array
	 */
	public function queryRow($sql, $params = array()){
		$sql = $this->generateSQL($sql,$params);
		return self::$db->select($sql)->getRow();
	}
	
	/**
	 * performs an update query to the database
	 *  @param string $sql    an sql query before sanitazation (question marks instead of paramater values)
	 * 	@param array  $params an array of paramaters to pass to the query
	 * @access public
	 * @return int number of affected rows
	 */
	public function update( $sql, $params=array()){
		$sql = $this->generateSQL($sql,$params);
		self::$db->insert($sql);
		return self::$db->numRows();
	}
	
	/**
	 * performs a simple cout action on a table acording to specified conditions
	 * 	@param string $table a table to count from
	 * 	@param array $condition an associative array of table fields and their required value (array('name'=>'arieh'))
	 * @access public
	 * @return int 
	 */
	public function count( $table, $conditions=array()){
		$fields = array_keys($conditions);
		$sql = "SELECT COUNT(" .( (count($fields)>0) ? "`$table`.`".$fields[0]."`" : '*' ) . ") as `c` FROM `$table` ";
		$values = array();
		if (count($fields)>0){
			$sql .= " WHERE ";
			$sep ='';
			foreach ($conditions as $field => $value){
				$sql .= "$sep `$field` = ? ";
				$sep = ' AND ';
				$values[]=$value;
			}
		}
		$row = $this->queryRow($sql,$values);

		return (int)$row['c'];
	}
	
	/**
	 * returns the last id generated by an insert query
	 * @access public
	 * @return int
	 */
	public function getLastId(){
		return self::$db->getLastInsertId();
	}
	
	protected function escape($param){
		if (is_numeric($param)){
			return self::$db->cleanNum($param);
		}
		if(is_string($param)){
			return "'".self::$db->cleanStr($param)."'";
		}
	}
	
	/**
	 * generates an sql statement
	 *  @param string $sql    an sql query before sanitazation (question marks instead of paramater values)
	 * 	@param array  $params an array of paramaters to pass to the query
	 * @access public
	 * @return string
	 */
	public function generateSQL($sql,$params){
		$sql = str_replace('%','%%',$sql);
		$nparams[] = str_replace('?','%s',$sql);
		
		foreach ($params as $param){
			$nparams[]= $this->escape($param);
		} 
		return call_user_func_array('sprintf',$nparams);
	}	
	
	/**
	 * returns an Iterator for the query results
	 * 	@param string $sql    an sql query before sanitazation (question marks instead of paramater values)
	 * 	@param array  $params an array of paramaters to pass to the query
	 * @access public
	 * @return Iterator,Countable 
	 */
	public function queryIterator($sql,$params=array()){
		$sql = $this->generateSQL($sql,$params);
		return self::$db->select($sql)->getIterator();
	}
	
	/**
	 * generates a IN-clause paramater list for sql queries, escaping the paramaters where needed
	 * 	@param array $array an array of variables to generate the IN list from
	 * @access public
	 * @return string
	 */
	public function generateInList(array $array){
		foreach ($array as &$param) $param = $this->escape($param);
		return implode(',',$array);
	}
}
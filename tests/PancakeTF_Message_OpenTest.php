<?php
require_once dirname(__FILE__) . "/../classes/PancakeTF_ShusterTestCase.class.php";
require_once dirname(__FILE__) . "/../classes/PancakeTF_PDOAccess.class.php";
require_once dirname(__FILE__) . "/../classes/PancakeTF_Message.class.php";

class PancakeTF_Message_OpenTest extends PancakeTF_ShusterTestCase{
	public function setMessage($db=false,$permission=true){
		if ($db){
			$this->setUpDB();
		}else{
			$this->db = $this->getMock('PancakeTF_PDOAccess',array('queryRow','queryArray','count','update','getLastId'));
		}
		
		$p_h = $this->getMock('PancakeTF_PermissionHandlerI',array('doesHavePermission'));
		$p_h->expects($this->any())->method('doesHavePermission')->will($this->returnValue($permission));
		$this->message = new PancakeTF_Message($this->db,$p_h);
	}
	
	public function getMockMessage(){
		$msg = $this->getMock('PancakeTF_Message',array('getId','getForumId','getDna','getBaseId'));
		return $msg;
	}
	
	public function testOpenMessage(){
		$this->setMessage(true);
		$this->message->setId(2);
		$this->assertEquals(2,$this->message->getId());
		$this->assertEquals('1.2',$this->message->getDna());
		$this->assertEquals('1',$this->message->getBaseId());
		$this->assertEquals('another message',$this->message->getTitle());
		$this->assertEquals('content',$this->message->getContent());
		$this->assertEquals(1,$this->message->getForumId());
		$this->assertFalse($this->message->isBase());
	}
	
	public function testUpdateTitle(){
		$this->setMessage(true);
		$this->message->setId(2);
		$this->message->setTitle('abcd');
		$this->message->save();
		$row = $this->db->queryRow(
				'SELECT `title` FROM
					pancaketf_message_contents
				WHERE `message_id`=?',array(2));
		$this->assertEquals($row['title'],'abcd');
	}
	
	public function testUpdateContent(){
		$this->setMessage(true);
		$this->message->setId(2);
		$this->message->setContent('abcd');
		$this->message->save();
		$row = $this->db->queryRow(
				'SELECT `content` FROM
					pancaketf_message_contents
				WHERE `message_id`=?',array(2));
		$this->assertEquals($row['content'],'abcd');
	}
	
	
	
	public function testMoveSiblings(){
		$this->setMessage(true);
		$this->message->setId(5);
		$pr = $this->getMockMessage();
		$pr->expects($this->any())
			->method('getForumId')->will($this->returnValue(1));
		$pr->expects($this->any())
			->method('getId')->will($this->returnValue(9));
		$pr->expects($this->any())->method('getDna')->will($this->returnValue('9'));
		$pr->expects($this->any())->method('getBaseId')->will($this->returnValue('9'));
		$this->message->setParent($pr);
		
		$this->message->save();
		
		$row = $this->db->queryRow('SELECT `dna`,`base_id` FROM `pancaketf_messages` WHERE `id`=?',array(8));
		$this->assertEquals('9.5.8',$row['dna']);
		$this->assertEquals('9',$row['base_id']);
	}
	
	public function testDelete(){
		$this->setMessage(true);
		$this->message->setId(8);
		$this->message->delete();
		$this->assertEquals($this->db->count('pancaketf_messages',array('id'=>8)),0);
		$this->assertEquals($this->db->count('pancaketf_message_contents',array('message_id'=>8)),0);
	}
	
	public function testDeleteSiblings(){
		$this->setMessage(true);
		$this->message->setId(1);
		$this->message->delete();
		$this->assertEquals($this->db->count('pancaketf_messages',array('id'=>2)),0);
		$this->assertEquals($this->db->count('pancaketf_message_contents',array('message_id'=>2)),0);
		$this->assertEquals($this->db->count('pancaketf_messages',array('id'=>4)),0);
		$this->assertEquals($this->db->count('pancaketf_message_contents',array('message_id'=>4)),0);
	}
	
	public function testMove(){
		$this->setMessage(true);
		$this->message->setId(5);
		$pr = $this->getMockMessage();
		$pr->expects($this->any())
			->method('getForumId')->will($this->returnValue(1));
		$pr->expects($this->any())
			->method('getId')->will($this->returnValue(2));
		$pr->expects($this->any())->method('getDna')->will($this->returnValue('1.2'));
		$pr->expects($this->any())->method('getBaseId')->will($this->returnValue('1'));
		$this->message->setParent($pr);
		
		$this->message->save();
		
		$row = $this->db->queryRow('SELECT `dna`,`base_id` FROM `pancaketf_messages` WHERE `id`=?',array(5));
		$this->assertEquals('1.2.5',$row['dna']);
		$this->assertEquals('1',$row['base_id']);
	}
	
	public function testSetBase(){
		$this->setMessage(true);
		$this->message->setId(4);
		$this->message->setBase();
		$this->message->save();
		$row = $this->db->queryRow('SELECT `dna`,`base_id` FROM `pancaketf_messages` WHERE `id`=?',array(4));
		$this->assertEquals('4',$row['dna']);
		$this->assertEquals('4',$row['base_id']);
	}
}
